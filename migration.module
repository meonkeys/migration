<?php // $Id$

/**
 * @file
 * The Migration module, which helps keep databases in sync.
 *
 * The Migration module is intended to help keep development, staging and
 * production databases in sync. This is done by collecting queries and
 * formatting them as a hook_update_N functon for running on the target
 * site.
 */

/**
 * Implementation of hook_perm().
 */
function migration_perm() {
  return array('administer migration');
}

/**
 * Implementation of hook_menu().
 */
function migration_menu() {
  $items = array();

  $items['admin/settings/migration'] = array(
    'title' => 'Migration',
    'description' => 'Settings for the Migration module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('migration_settings_form'),
    'access arguments' => array('administer migration'),
    'file' => 'migration.admin.inc',
  );

  $items['admin/settings/migration/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/settings/migration/tables'] = array(
    'title' => 'Monitored Tables',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('migration_tables_list_form'),
    'access arguments' => array('administer migration'),
    'file' => 'migration.admin.inc',
    'weight' => 1,
  );

  $items['admin/settings/migration/start_monitor'] = array(
    'title' => 'Start monitoring',
    'type' => MENU_CALLBACK,
    'page callback' => 'migration_monitor_control',
    'page arguments' => array('start'),
    'access arguments' => array('administer migration'),
    'file' => 'migration.admin.inc',
  );

  $items['admin/settings/migration/stop_monitor'] = array(
    'title' => 'Stop monitoring',
    'type' => MENU_CALLBACK,
    'page callback' => 'migration_monitor_control',
    'page arguments' => array('stop'),
    'access arguments' => array('administer migration'),
    'file' => 'migration.admin.inc',
  );

  return $items;
}

function migration_id_safe($string) {
  $search = array(' ', '-');
  return strtolower(str_replace($search, '', $string));
}

/**
 * Implementation of hook_exit().
 *
 * Migration saves all the queries that occurred during this page view.
 */
function migration_exit($destination = NULL) {

  $page_queries = migration_global_queries_processor();
  $valid_queries = migration_filterqueries($page_queries);

  foreach ($valid_queries as $querystruct) {
    $functions[$querystruct['function']] = $querystruct['function'];
    $usernames[$querystruct['username']] = $querystruct['username'];
    $querystrings[$querystruct['querystring']] = $querystruct['querystring'];
    $tablename = migration_get_tablename($querystruct['querystring']);
    $tablenames[$tablename] = $tablename;

    // TODO: for debugging - get rid of this later
    // $funcquery[$querystruct['function'] . $querystruct['querystring']] = $querystruct['function'] . $querystruct['querystring'];
  }

  // Log the sql strings to disk.
  if (migration_file_append_data(implode("\n", $querystrings), 'queries.sql')) {
    $output .= t('Migration file saved at !file', array('!file' => realpath($migration_get_filename)));
  }
  else {
    $output .= t('Error saving sql file.');
  }

  if (TRUE) {
    $output .= migration_format_update_hook($queries);
  }

  drupal_set_message($output, 'status');
}

function migration_get_filename($file) {
  $filename = variable_get('migration_directory_path', file_directory_path() . '/migration') . '/' . $file;
  return $filename;
}

/**
 * Takes the global queries and extracts the query strings, the username, and the function called.
 *
 * @return
 *   An array containing the query data.
 */
function migration_global_queries_processor() {
  global $queries;
  foreach ($queries as $query){
    //regex explain: using % instead of /, the 's' extends the match past single lines.
    preg_match("%(?<function>.*)\n\/\* (?<username>.*) : .*\*\/ (?<querystring>.*)%s", $query[0], $matchedquery);
    //strip initial space
    $matchedquery['querystring'] = preg_replace("/^ */s", "", $matchedquery['querystring']);
    //strip linefeeds
    $matchedquery['querystring'] = preg_replace("/\n/s", "", $matchedquery['querystring']);

    $splitqueries[] = $matchedquery;
  }

  return $splitqueries;
}

function migration_file_append_data($input, $filename) {
  // TODO: Fix to get this from the database.
  $file = file_directory_path() . '/' . $filename;
  $file = realpath($file);
  $data = file_get_contents($file);
  $data .= $input;
  $return = file_save_data($data, $file, FILE_EXISTS_REPLACE);

  return $return;
}

function migration_query_row($sql) {
  $output .= "  $sql = array($sql);\n";
  return $output;
}

/**
 * This function strips out the individual querystructs that we dont want to
 * keep.
 */
function migration_filterqueries($querystruct) {
  // Filter by querystring
  foreach ($querystruct as $query) {
    if (!migration_is_select($query['querystring'])) {
      // its *not* a select, so it will change the database.
      // next lets find out if we care if it changes the db.

      // First we check our configured table name list.
      // If its in the "do not record list" we ditch it.
      $tablename = migration_get_tablename($query['querystring']);
      if (migration_is_table_to_record($tablename)) {
      // Secondly we check the configured function list
      // we will delete by function if we know there are functions we dont care about
      // Finally, if we want to filter by username we can.. later.. later..
        $filteredstruct[] = $query;
      }
    }
  }
  return $filteredstruct;
}

function migration_get_tablename($sqlstring){
  preg_match("/(INSERT INTO|DELETE FROM|ALTER TABLE|UPDATE|DROP VIEW|CREATE VIEW|DROP TABLE|CREATE TABLE|LOCK TABLES|CREATE DOMAIN|CREATE INDEX|CREATE UNIQUE INDEX|CREATE SEQUENCE|DROP INDEX) (?<tablename>.*?)($| ).*/", $sqlstring, $splitqueries[]);
  return $splitqueries[0]['tablename'];
}

function migration_is_table_to_record($tablename) {
  // TODO: Record them all for now. Get table name list from the database.
  // Do we store the good tables or the bad ones?
  // Record the bad ones.  This will eventually be configurable in the
  // interface much like backup/migrate.
  $skiptables = variable_get('migration_database_tables', migration_get_default_tables());

  if (in_array($tablename, $skiptables)) {
    // TODO: Debug
    // print_r ("<H1>irrelevant table $tablename<BR></H1>");
    return FALSE;
  }
  return TRUE;
}

function migration_is_select($sqlstring) {
  $process = FALSE;
  // Filter out all the queries beginning with SELECT.
  // Note that we dont want to skip *all* queries that contain SELECT.
  // Just the ones that start with SELECT (sub-selects are fine).
  if (stripos($sqlstring, 'SELECT') === 0) {
    $process = TRUE;
  }
  return $process;
}

function migration_keepquery($query) {
  // TODO: Either make this configurable or ensure we're excluding the right stuff.

  $process = TRUE;
  $query = trim($query);

  // Starts with...
  if (stripos($query, 'SELECT') === 0 ||
      stripos($query, 'DELETE') === 0 ||
      stripos($query, 'INSERT INTO cache') === 0 ||
      stripos($query, 'INSERT INTO search_') === 0 ||
      stripos($query, 'INSERT INTO watchdog') === 0 ||
      stripos($query, 'INSERT INTO system') === 0 ||
      stripos($query, 'INSERT INTO menu_router') === 0 ||
      stripos($query, 'UPDATE cache') === 0 ||
      stripos($query, 'UPDATE history') === 0 ||
      stripos($query, 'SHOW TABLES') === 0 ||
      stripos($query, 'UPDATE system') === 0 ||
      stripos($query, 'UPDATE sessions') === 0 ||
      stripos($query, 'UPDATE users SET access =') === 0 ||
      stripos($query, 'UPDATE search_total') === 0 ||
      stripos($query, 'UPDATE menu_link') === 0) {
    $process = FALSE;
  }

  // Starts with...
  if (stripos($query, 'UPDATE variable') === 0) {
    // Contains...
    if (stripos($query, 'update_last_check') === TRUE ||
        stripos($query, 'poormanscron_lastrun') === TRUE ||
        stripos($query, 'node_cron_comments_scale') === TRUE ||
        stripos($query, 'node_cron_views_scale') === TRUE ||
        stripos($query, 'node_cron_last') === TRUE ||
        stripos($query, 'cron_last') === TRUE) {
      $process = FALSE;
    }
  }

  return $process;
}

function migration_format_update_hook($queries) {
  global $queries;
  $count = migration_get_next_id();

  $output = '<code><pre>';
  $output .= "function mymodule_update_$count() {\n";
  $output .= '  $sql = array();';

  foreach ($queries as $data) {
    $bits = explode("\n", $data[0]);
    $query = preg_replace('|\/\*\s[a-z\s:_]*\*\/\s|', '', $bits[1]);

    $process = migration_keepquery($query);
    if ($process) {
      $output .= "\n";
      $output .= "  /* $bits[0] */\n";
      $output .= '  $sql[] = update_sql($query);';
    }

  }
  $output .= "\n  return \$sql;\n}\n";
  $output .= '</pre></code>';

  return $output;
}

function migration_get_next_id() {
  // TODO: Retrieve next update N from system table.
  return 6000;
}


function migration_init() {
  drupal_add_js(drupal_get_path('module', 'migration') . '/migration.js');
}

function migration_footer($main = 0) {
  $output = '<div style="float: right; clear: both;" id="migration_monitor_switch">';
  if (variable_get('migration_query_monitor', FALSE)) {
    $output .= '<p><a id="migration_stop_monitor">Stop Query Monitor</a></p>';
  }
  else {
    $output .= '<p><a id="migration_start_monitor">Start Query Monitor</a></p>';
  }
  $output .= '</div>';
  return $output;
}
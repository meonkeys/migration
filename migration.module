<?php // $Id$

/**
 * Implementation of hook_menu().
 */
function migration_menu() {
  $items = array();

  $items['admin/settings/migration'] = array(
    'title' => 'Migration',
    'description' => 'Settings for the Migration module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('migration_settings_form'),
    'access arguments' => array('administer migration'),
  );

  return $items;
}

function migration_settings_form($form_state) {
  $form = array();

  $form['migration_module_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Module name'),
    '#description' => t('Enter the module name used in the hook_update_N call.'),
    '#default_value' => variable_get('migration_module_name', migration_id_safe(variable_get('site_name', 'Drupal'))),
  );

  return system_settings_form($form);
}

function migration_id_safe($string) {
  $search = array(' ', '-');
  return strtolower(str_replace($search, '', $string));
}

function migration_exit($destination = NULL) {
  global $queries;

  $count = migration_get_next_id();

  $page_queries = "function mymodule_update_$count() {\n";
  foreach ($queries as $query) {
    $sql = preg_replace("|.*\n\/\*.*\*\/ |", '', $query[0]);
    if (migration_keepquery($sql)) {
      // TODO: make this a hash so we save only unique queries.
      $page_queries .= migration_query_row($sql);
    }
  }
  $page_queries .= "  return \$sql;\n}\n";

  // TODO: Make this file location configurable.
  if (migration_file_append_data($page_queries, file_directory_path() . '/queryfile.sql')) {
    $file = file_directory_path() . '/queryfile.sql';
    $output = t("Migration file saved at !file", array('!file' => realpath($file)));
  }
  else {
    $output = t("Error saving sql file.");
  }

  if (TRUE) {
    $output .= migration_format_update_hook($queries);
  }

  //print $output;
}

function migration_file_append_data($input, $file) {
  //$data = file_get_contents($file);
  $data .= $input;
  $return = file_save_data($data, $file, FILE_EXISTS_REPLACE);

  return $return;
}

function migration_query_row($sql) {
  $output .= '  $sql = array(' . $sql . ");\n";
  return $output;
}

function migration_keepquery($query) {
  // TODO: Either make this configurable or ensure we're excluding the right stuff.

  $process = TRUE;
  $query = trim($query);

  // Starts with...
  if (stripos($query, 'SELECT') === 0 ||
      stripos($query, 'DELETE') === 0 ||
      stripos($query, 'INSERT INTO cache') === 0 ||
      stripos($query, 'INSERT INTO search_') === 0 ||
      stripos($query, 'INSERT INTO watchdog') === 0 ||
      stripos($query, 'INSERT INTO system') === 0 ||
      stripos($query, 'INSERT INTO menu_router') === 0 ||
      stripos($query, 'UPDATE cache') === 0 ||
      stripos($query, 'UPDATE history') === 0 ||
      stripos($query, 'SHOW TABLES') === 0 ||
      stripos($query, 'UPDATE system') === 0 ||
      stripos($query, 'UPDATE sessions') === 0 ||
      stripos($query, 'UPDATE users SET access =') === 0 ||
      stripos($query, 'UPDATE search_total') === 0 ||
      stripos($query, 'UPDATE menu_link') === 0) {
    $process = FALSE;
  }

  // Starts with...
  if (stripos($query, 'UPDATE variable') === 0) {
    // Contains...
    if (stripos($query, 'update_last_check') === TRUE ||
        stripos($query, 'poormanscron_lastrun') === TRUE ||
        stripos($query, 'node_cron_comments_scale') === TRUE ||
        stripos($query, 'node_cron_views_scale') === TRUE ||
        stripos($query, 'node_cron_last') === TRUE ||
        stripos($query, 'cron_last') === TRUE) {
      $process = FALSE;
    }
  }

  return $process;
}

function migration_format_update_hook($queries) {
  $count = migration_get_next_id();

  $output = '<code><pre>';
  $output .= "function mymodule_update_$count() {\n";
  $output .= '  $sql = array();';

  foreach ($queries as $data) {
    $bits = explode("\n", $data[0]);
    $query = preg_replace('|\/\*\s[a-z\s:_]*\*\/\s|', '', $bits[1]);

    $process = migration_keepquery($query);
    if ($process) {
      $output .= "\n";
      $output .= "  /* $bits[0] */\n";
      $output .= '  $sql[] = update_sql("' . $query . '");';
    }

  }
  $output .= "\n  return \$sql;\n}\n";
  $output .= '</pre></code>';
  
  return $output;
}

function migration_get_next_id() {
  // TODO: Retrieve next update N from system table.
  return 6000;
}
